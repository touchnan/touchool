<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- enable the configuration of transactional behavior based on annotations -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
	
<!--   <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>-->
    
     <!--<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">-->
     <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>


    <!--
    hibernate5 时LocalSessionFactoryBean依赖dataSourceProxy时 不知道为什么报循环引用
    ***************************
    APPLICATION FAILED TO START
    ***************************
    Description:

    The dependencies of some of the beans in the application context form a cycle:

       transactionManager defined in class path resource [spring/context-db.xml]
          ↓
       sessionFactory defined in class path resource [spring/context-db.xml]
    ┌─────┐
    |  dataSource defined in class path resource [spring/context-db.xml]
    ↑     ↓
    |  dataSourceTarget defined in class path resource [spring/context-db.xml]
    ↑     ↓
    |  org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker
    └─────┘

    -->

    <!-- Proxy for a target JDBC(DataSource), adding awareness of Spring-managed transactions -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy" scope="singleton">
        <constructor-arg>
            <ref bean="dataSourceTarget"/>
        </constructor-arg>
    </bean>

    <bean id="dataSourceTarget" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">-->
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.passwd}"/>
        <!--连接池中保留的最小连接数。-->
        <property name="minPoolSize" value="10" />
        <!--连接池中保留的最大连接数。Default: 15 --> 
        <property name="maxPoolSize" value="100" />
        <!--最大空闲时间,1800秒内未使用则连 接被丢弃。若为0则永不丢弃。Default: 0 --> 
        <property name="maxIdleTime" value="1800" />
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --> 
        <property name="acquireIncrement" value="3" /> 
        <property name="maxStatements" value="1000" /> 
        <property name="initialPoolSize" value="10" />
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="60" />
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --> 
        <property name="acquireRetryAttempts" value="30" />
        <property name="breakAfterAcquireFailure" value="true" />
        <property name="testConnectionOnCheckout" value="false" />

		<!-- c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么 属性preferredTestQuery将被忽略。
		<property name="automaticTestTable">Test</property>
		-->
		<!-- 定义所有连接测试都执行的测试语句 
		<property name="preferredTestQuery" value="select id from test where id=1"/>
		 -->
	 
    </bean>
	
      <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
      <!--<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"> -->
<!--    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">-->
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
        <property name="packagesToScan">
            <list>
                <value>cn.touch.bootweb.entity</value>
            </list>
        </property>
        
<!--        <property name="annotatedClasses">
            <list>
                <value>cn.touch.entity.User</value>
                <value>cn.touch.entity.UserProperties</value>
            </list>        
        </property> -->
         
<!--        <property name="mappingDirectoryLocations">
            <list>
                <value>classpath:cn/touch/zkytxl/domain</value>
            </list>
        </property>-->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
<!--                <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>-->
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                <prop key="net.sf.ehcache.configurationResourceName">${ehcache.configFile}</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
                <prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>


                <!-- hibernate5，Hibernate之注解表的命名策略
                     https://blog.csdn.net/qinshijangshan/article/details/53444499
                 -->
                <prop key="hibernate.physical_naming_strategy">org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy</prop>
                <prop key="hibernate.implicit_naming_strategy">org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy</prop>
            </props>
        </property>
<!--        <property name="useTransactionAwareDataSource" value="true"></property>-->
    </bean>
	
<!--    <bean id="db" class="cn.touch.db.MySQLdb" scope="singleton">
        <constructor-arg ref="dataSource"></constructor-arg>
    </bean>
	
    <bean id="sqlParser" class="cn.touchin.db.jdbc.MysqlSQLParser" scope="singleton"></bean>-->
</beans>