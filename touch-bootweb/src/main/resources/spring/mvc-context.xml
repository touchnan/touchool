<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<context:property-placeholder location="classpath:env.properties" />

	<!-- 须在SpringMVC的springmvc-servlet.xml中, 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
	<!-- 配置以下两个bean即可实现此功能 -->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" p:proxyTargetClass="true"/>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor" p:securityManager-ref="securityManager"/>

    <!-- <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"
          p:basename="messages/messages"/> -->
          
  <!--  all resources inside folder src/main/webapp/resources are mapped so they can be refered to inside JSP files
        (see header.jsp for more details) -->
    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources/ directory -->
    <mvc:resources mapping="/resources/**" location="/resources/"/>

    <!-- uses WebJars so Javascript and CSS libs can be declared as Maven dependencies (Bootstrap, jQuery...) -->
    <!-- <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/> -->
	<!--
	<mvc:resources mapping="/resources/**" location="/,/public-resources/,classpath:/META-INF/public-web-resources/" cache-period="31556926"/>
	
	<util:properties id="applicationProps" location="/WEB-INF/spring/application.properties"/>
	<mvc:resources mapping="/resources-#{applicationProps['application.version']}/**" location="/, /public-resources/, classpath:/META-INF/public-web-resources/" cache-period="31556926"/>
	-->          
		
	<context:component-scan base-package="cn.touch.web.controller,cn.touch.showcase.controller" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<bean id="fastjsonConverts" class="cn.touch.web.mapper.fastjson.MappingFastJsonHttpMessageConverter" />

	<!-- <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"> -->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<ref bean="fastjsonConverts"></ref>
		</mvc:message-converters>
		
		<!-- <mvc:async-support default-timeout="3000">
			<mvc:callable-interceptors>
				<bean
					class="org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor"></bean>
			</mvc:callable-interceptors>
		</mvc:async-support> -->
	</mvc:annotation-driven>

	<!-- <bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="favorPathExtension" value="true" />
		<property name="ignoreAcceptHeader" value="true" />
		<property name="defaultContentType" value="text/html" />
		<property name="mediaTypes">
			<map>
				<entry key="html" value="text/html" />
				<entry key="xml" value="application/xml" />
				<entry key="atom" value="application/atom+xml" />
				<entry key="json" value="application/json" />
			</map>
		</property>
	</bean -->
	
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- Example: a logical view name of 'showMessage' is mapped to '/WEB-INF/view/showMessage.jsp' -->
		<property name="prefix" value="${web.view.jsp.prefix}" />
		<property name="suffix" value="${web.view.jsp.suffix}" />
	</bean>
	
<!-- 	<mvc:interceptors>
	    <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
	    <mvc:interceptor>
	        <mvc:mapping path="/**"/>
	        <mvc:exclude-mapping path="/admin/**"/>
	        <bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor" />
	    </mvc:interceptor>
            
        <mvc:interceptor>  
           <mvc:mapping path="/txl/**"/>  
           <mvc:mapping path="/user/**"/>
           <mvc:exclude-mapping path="/user/login"/>
           <mvc:exclude-mapping path="/user/auth"/>
           <bean class="cn.touch.interceptor.LoginInterceptor"></bean>  
        </mvc:interceptor> 
	</mvc:interceptors> -->	
  
    <!-- 定义无Controller的path<->view直接映射 -->
  	<!-- <mvc:view-controller path="/" view-name="redirect:/${web.view.index}" /> -->
	<mvc:view-controller path="/" view-name="/${web.view.index}" />
  
	<!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler />	
	
	<!-- 支持Shiro对Controller的方法级AOP安全控制 begin -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean> -->
	<!-- Shiro end -->
	
	<!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"> -->
	<bean class="cn.touch.web.handler.TouchMappingExceptionResolver">
        <!-- results into 'WEB-INF/view/exception.jsp' -->
        <property name="defaultErrorView" value="${web.view.exception}"/>
        <!-- needed otherwise exceptions won't be logged anywhere -->
        <property name="warnLogCategory" value="warn"/>
        
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop>
			</props>
		</property>
		
		<property name="debug" value="false"/>
	    <property name="toplips">
	        <map>
	            <entry key ="org.springframework.web.multipart.MaxUploadSizeExceededException" value="文件上传超过大小限制"/>
	            <entry key ="java.lang.IllegalArgumentException" value="参数异常  "/>
	            <entry key ="org.springframework.jdbc.BadSqlGrammarException" value="SQL语法异常  "/>
	            <entry key ="org.apache.shiro.authz.UnauthorizedException" value="对不起,您你没有相关操作权限"/>
	        </map>
	    </property>
	    		
	</bean>
	
	
	<!-- 上传文件拦截，设置最大上传文件大小   10M=10*1024*1024(B)=10485760 bytes -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:maxUploadSize="${web.maxUploadSize}">
	</bean>

</beans>
