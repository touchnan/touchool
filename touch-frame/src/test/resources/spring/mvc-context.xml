<?xml version="1.0" encoding="UTF-8"?>
<!--
    - DispatcherServlet application context for web tier.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="mvc-view.xml"/>

    <!--
        - POJOs labeled with the @Controller and @Service annotations are auto-detected.
    -->        	
	<context:component-scan base-package="cn.touch.lab.spring.web" />
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!--
	<mvc:annotation-driven conversion-service="conversionService" content-negotiation-manager="contentNegotiationManager" >
	-->
	<mvc:annotation-driven >
		<!--  Customizing the Provided Configuration 
		 	To customize the default configuration of <mvc:annotation-driven /> 
		 	check what attributes and sub-elements it supports.
		    You can view the Spring MVC XML schema or 
		    use the code completion feature of your IDE 
		    to discover what attributes and sub-elements are available.		
		-->
		<!--
		<mvc:message-converters>
			<bean class="org.example.MyHttpMessageConverter"/>
			<bean class="org.example.MyOtherHttpMessageConverter"/>
		</mvc:message-converters>
		 -->
		
		<!-- 
		<mvc:argument-resolvers>
			<bean class="org.springframework.samples.mvc.data.custom.CustomArgumentResolver" />
		</mvc:argument-resolvers>
		-->
		
		<mvc:async-support default-timeout="3000">
			<mvc:callable-interceptors>
				<bean class="org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor"></bean>
			</mvc:callable-interceptors>
		</mvc:async-support>
				 
	</mvc:annotation-driven>
	<!-- The above registers a RequestMappingHandlerMapping, a RequestMappingHandlerAdapter, 
		and an ExceptionHandlerExceptionResolver (among others) in support of processing 
		requests with annotated controller methods using annotations such as @RequestMapping 
		, @ExceptionHandler, and others. -->
		
	<mvc:interceptors>
	    <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
	    <mvc:interceptor>
	        <mvc:mapping path="/**"/>
	        <mvc:exclude-mapping path="/admin/**"/>
	        <bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor" />
	    </mvc:interceptor>
	    <!--
	    <mvc:interceptor>
	    	<mvc:mapping path="/secure/*"/>
	        <bean class="org.example.SecurityInterceptor" />
	    </mvc:interceptor>
	    -->
	</mvc:interceptors>
	
	<!-- Only needed because we install custom converters to support -->
	<!-- 
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="registerDefaultFormatters" value="true" />
		<property name="formatters">
	        <set>
	            <bean class="org.springframework.format.number.NumberFormatAnnotationFormatterFactory" />
	        </set>
	        <list>
	            <bean class="org.example.MyFormatter"/>
	            <bean class="org.example.MyOtherFormatter"/>
	        </list>
        </property>
        <property name="formatterRegistrars">
	       	<set>
	          <bean class="org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar">
	              <property name="dateFormatter">
	                  <bean class="org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean">
	                      <property name="pattern" value="yyyyMMdd"/>
	                  </bean>
	              </property>
	          </bean>
	      	</set>
     	</property>
	</bean>
	 -->
		
    <!--  all resources inside folder src/main/webapp/resources are mapped so they can be refered to inside JSP files
        (see header.jsp for more details) -->
    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources/ directory -->
    <mvc:resources mapping="/resources/**" location="/resources/"/>

    <!-- uses WebJars so Javascript and CSS libs can be declared as Maven dependencies (Bootstrap, jQuery...) -->
    <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>

    <mvc:view-controller path="/" view-name="welcome" />	
	
	<!--
	<mvc:resources mapping="/resources/**" location="/,/public-resources/,classpath:/META-INF/public-web-resources/" cache-period="31556926"/>
	
	<util:properties id="applicationProps" location="/WEB-INF/spring/application.properties"/>
	<mvc:resources mapping="/resources-#{applicationProps['application.version']}/**" location="/, /public-resources/, classpath:/META-INF/public-web-resources/" cache-period="31556926"/>
	-->
	
    <!--
        - Message source for this context, loaded from localized "messages_xx" files.
        - Files are stored inside src/main/resources
    -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"
          p:basename="messages/messages"/>

    <!--
        - This bean resolves specific types of exceptions to corresponding logical 
        - view names for error views.
    -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- view name resolved using bean of type InternalResourceViewResolver (declared in mvc-view.xml) -->
        <property name="defaultErrorView" value="exception"/>
        <!-- results into 'WEB-INF/jsp/exception.jsp' -->
        <property name="warnLogCategory" value="warn"/>
        <!-- needed otherwise exceptions won't be logged anywhere -->
    </bean>

	<!-- Using a MultipartResolver with Servlet 3.0 -->
	<!-- 
		In order to use Servlet 3.0 based multipart parsing, 
		you need to mark the DispatcherServlet with a "multipart-config" section in web.xml, 
		or with a javax.servlet.MultipartConfigElement in programmatic Servlet registration,
		or in case of a custom Servlet class possibly with a javax.servlet.annotation.MultipartConfig annotation on your Servlet class. 
		Configuration settings such as maximum sizes or storage locations need to be applied at that Servlet registration level 
		as Servlet 3.0 does not allow for those settings to be done from the MultipartResolver.	
	 -->
	<bean id="multipartResolver"
	    class="org.springframework.web.multipart.support.StandardServletMultipartResolver">
	</bean>	
	
	<!-- 
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		
		one of the properties available; the maximum file size in bytes 
		<property name="maxUploadSize" value="100000" />
	</bean>
	
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.support.StandardServletMultipartResolver">
	</bean>
	-->
	
	<!-- 
		This tag allows for mapping the DispatcherServlet to "/" (thus overriding the mapping of the container's default Servlet),
		while still allowing static resource requests to be handled by the container's default Servlet. 
		It configures a DefaultServletHttpRequestHandler with a URL mapping of "/**" and the lowest priority relative to other URL mappings.

		This handler will forward all requests to the default Servlet. 
		Therefore it is important that it remains last in the order of all other URL HandlerMappings. 
		That will be the case if you use <mvc:annotation-driven> or alternatively if you are setting up your own customized HandlerMapping instance be sure to set its order property to a value lower than that of the DefaultServletHttpRequestHandler, 
		which is Integer.MAX_VALUE.	
	 -->
	 <!-- 
	 <mvc:default-servlet-handler/>
	 <mvc:default-servlet-handler default-servlet-name="myCustomDefaultServlet"/>
	 -->
	 
	 <task:annotation-driven />
	 <!-- 
	 <task:annotation-driven executor="myExecutor" scheduler="myScheduler"/>
	 <task:executor id="myExecutor" pool-size="5"/>
	 <task:scheduler id="myScheduler" pool-size="10"/>}
	  -->
</beans>